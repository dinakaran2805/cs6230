/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "cfloat8_mul.v:34" *)
module cfloat8_mul(CLK, RST_N, send_data_input, EN_send, RDY_send, receive, RDY_receive);
  (* src = "cfloat8_mul.v:380" *)
  wire [3:0] _0000_;
  (* src = "cfloat8_mul.v:380" *)
  wire [3:0] _0001_;
  (* src = "cfloat8_mul.v:380" *)
  wire [3:0] _0002_;
  (* src = "cfloat8_mul.v:380" *)
  wire [7:0] _0003_;
  (* src = "cfloat8_mul.v:380" *)
  wire [7:0] _0004_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0005_;
  (* src = "cfloat8_mul.v:380" *)
  wire [2:0] _0006_;
  (* src = "cfloat8_mul.v:380" *)
  wire [2:0] _0007_;
  (* src = "cfloat8_mul.v:380" *)
  wire [5:0] _0008_;
  (* src = "cfloat8_mul.v:380" *)
  (* unused_bits = "0 1 2 3" *)
  wire [20:0] _0009_;
  (* src = "cfloat8_mul.v:380" *)
  wire [2:0] _0010_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0011_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0012_;
  (* src = "cfloat8_mul.v:380" *)
  wire [2:0] _0013_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0014_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0015_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0016_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0017_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0018_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0019_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0020_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0021_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0022_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0023_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0024_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0025_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0026_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0027_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0028_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0029_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0030_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0031_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0032_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0033_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0034_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0035_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0036_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0037_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0038_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0039_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0040_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0041_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0042_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0043_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0044_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0045_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0046_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0047_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0048_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0049_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0050_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0051_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0052_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0053_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0054_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0055_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0056_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0057_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0058_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0059_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0060_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0061_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0062_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0063_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0064_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0065_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0066_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0067_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0068_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0069_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0070_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0071_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0072_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0073_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0074_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0075_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0076_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0077_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0078_;
  (* src = "cfloat8_mul.v:380" *)
  wire _0079_;
  (* src = "cfloat8_mul.v:48" *)
  wire _0080_;
  (* src = "cfloat8_mul.v:44" *)
  wire _0081_;
  (* src = "cfloat8_mul.v:60" *)
  wire _0082_;
  (* src = "cfloat8_mul.v:60" *)
  wire _0083_;
  (* src = "cfloat8_mul.v:60" *)
  wire _0084_;
  (* src = "cfloat8_mul.v:60" *)
  wire _0085_;
  (* src = "cfloat8_mul.v:65" *)
  wire _0086_;
  (* src = "cfloat8_mul.v:65" *)
  wire _0087_;
  (* src = "cfloat8_mul.v:65" *)
  wire _0088_;
  (* src = "cfloat8_mul.v:65" *)
  wire _0089_;
  (* src = "cfloat8_mul.v:75" *)
  wire _0090_;
  (* src = "cfloat8_mul.v:75" *)
  wire _0091_;
  (* src = "cfloat8_mul.v:75" *)
  wire _0092_;
  (* src = "cfloat8_mul.v:75" *)
  wire _0093_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0094_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0095_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0096_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0097_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0098_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0099_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0100_;
  (* src = "cfloat8_mul.v:80" *)
  wire _0101_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0102_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0103_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0104_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0105_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0106_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0107_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0108_;
  (* src = "cfloat8_mul.v:85" *)
  wire _0109_;
  (* src = "cfloat8_mul.v:90" *)
  wire _0110_;
  (* src = "cfloat8_mul.v:94" *)
  wire _0111_;
  (* src = "cfloat8_mul.v:94" *)
  wire _0112_;
  (* src = "cfloat8_mul.v:94" *)
  wire _0113_;
  (* src = "cfloat8_mul.v:99" *)
  wire _0114_;
  (* src = "cfloat8_mul.v:99" *)
  wire _0115_;
  (* src = "cfloat8_mul.v:99" *)
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire _0274_;
  wire _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0451_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0452_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0453_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0454_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0455_;
  (* src = "cfloat8_mul.v:109" *)
  wire _0456_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0457_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0458_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0459_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0460_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0461_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0462_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0463_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0464_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0465_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0466_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0467_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0468_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0469_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0470_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0471_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0472_;
  (* src = "cfloat8_mul.v:119" *)
  wire _0473_;
  (* src = "cfloat8_mul.v:124" *)
  wire _0474_;
  (* src = "cfloat8_mul.v:124" *)
  wire _0475_;
  (* src = "cfloat8_mul.v:124" *)
  wire _0476_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0477_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0478_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0479_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0480_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0481_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0482_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0483_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0484_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0485_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0486_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0487_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0488_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0489_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0490_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0491_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0492_;
  (* src = "cfloat8_mul.v:47" *)
  wire _0493_;
  (* src = "cfloat8_mul.v:129" *)
  wire _0494_;
  (* src = "cfloat8_mul.v:133" *)
  wire _0495_;
  (* src = "cfloat8_mul.v:137" *)
  wire _0496_;
  (* src = "cfloat8_mul.v:137" *)
  wire _0497_;
  (* src = "cfloat8_mul.v:137" *)
  wire _0498_;
  (* unused_bits = "4 5 6" *)
  wire [7:0] _0499_;
  (* unused_bits = "4 5 6" *)
  wire [7:0] _0500_;
  (* unused_bits = "3 4 5" *)
  wire [7:0] _0501_;
  (* unused_bits = "3 4 5 6" *)
  wire [7:0] _0502_;
  (* src = "<techmap.v>:187" *)
  (* unused_bits = "4 5 6" *)
  wire [7:0] _0503_;
  (* src = "<techmap.v>:187" *)
  (* unused_bits = "4 5 6" *)
  wire [7:0] _0504_;
  (* src = "<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3 4 5 6 7" *)
  wire [7:0] _0505_;
  (* unused_bits = "4 5 6 7" *)
  wire [7:0] _0506_;
  wire [7:0] _0507_;
  (* unused_bits = "4" *)
  wire [7:0] _0508_;
  (* unused_bits = "4 5" *)
  wire [7:0] _0509_;
  (* unused_bits = "4 5 6" *)
  wire [7:0] _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire [3:0] _0515_;
  wire [1:0] _0516_;
  wire [1:0] _0517_;
  wire [2:0] _0518_;
  wire _0519_;
  wire [1:0] _0520_;
  wire [1:0] _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire [2:0] _0529_;
  wire [2:0] _0530_;
  wire [1:0] _0531_;
  wire [1:0] _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  (* src = "cfloat8_mul.v:337" *)
  wire _0541_;
  (* src = "cfloat8_mul.v:338" *)
  wire _0542_;
  (* src = "cfloat8_mul.v:339" *)
  wire _0543_;
  (* src = "cfloat8_mul.v:220" *)
  wire _0544_;
  (* src = "cfloat8_mul.v:221" *)
  wire _0545_;
  (* src = "cfloat8_mul.v:222" *)
  wire _0546_;
  wire [2:0] _0547_;
  wire [2:0] _0548_;
  wire _0549_;
  wire [7:0] _0550_;
  wire [7:0] _0551_;
  wire [3:0] _0552_;
  wire [3:0] _0553_;
  wire [3:0] _0554_;
  wire [2:0] _0555_;
  wire [2:0] _0556_;
  wire [2:0] _0557_;
  wire [2:0] _0558_;
  (* src = "cfloat8_mul.v:295|cfloat8_mul.v:290|<techmap.v>:432" *)
  wire [17:0] _0559_;
  (* src = "cfloat8_mul.v:295|cfloat8_mul.v:290|<techmap.v>:428" *)
  wire [5:0] _0560_;
  wire [1:0] _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire [2:0] _0565_;
  wire _0566_;
  wire _0567_;
  wire [2:0] _0568_;
  (* unused_bits = "0 1 2 3" *)
  wire [20:0] _0569_;
  wire [5:0] _0570_;
  (* src = "cfloat8_mul.v:235|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [3:0] _0571_;
  wire [3:0] _0572_;
  (* src = "cfloat8_mul.v:236|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [2:0] _0573_;
  (* src = "cfloat8_mul.v:359|cfloat8_mul.v:236|<techmap.v>:257" *)
  wire [2:0] _0574_;
  (* src = "cfloat8_mul.v:359|cfloat8_mul.v:236|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [2:0] _0575_;
  (* src = "cfloat8_mul.v:371|cfloat8_mul.v:236|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [2:0] _0576_;
  (* src = "cfloat8_mul.v:373|cfloat8_mul.v:235|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [3:0] _0577_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:258" *)
  wire [3:0] _0578_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "2" *)
  wire [3:0] _0579_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "1 2 3" *)
  wire [3:0] _0580_;
  wire [3:0] _0581_;
  (* src = "cfloat8_mul.v:295|cfloat8_mul.v:290|<techmap.v>:445" *)
  wire _0582_;
  (* src = "cfloat8_mul.v:374|<techmap.v>:102" *)
  wire [5:0] _0583_;
  (* src = "cfloat8_mul.v:374|<techmap.v>:102" *)
  wire [5:0] _0584_;
  (* src = "cfloat8_mul.v:376|<techmap.v>:102" *)
  wire [5:0] _0585_;
  (* src = "cfloat8_mul.v:376|<techmap.v>:102" *)
  wire [5:0] _0586_;
  (* src = "cfloat8_mul.v:376|<techmap.v>:102" *)
  wire [5:0] _0587_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:258" *)
  wire [3:0] _0588_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [3:0] _0589_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "1 2 3" *)
  wire [3:0] _0590_;
  wire [3:0] _0591_;
  (* src = "cfloat8_mul.v:235|<techmap.v>:260" *)
  (* unused_bits = "3" *)
  wire [3:0] _0592_;
  (* src = "cfloat8_mul.v:235|<techmap.v>:260|<techmap.v>:221" *)
  wire _0593_;
  (* src = "cfloat8_mul.v:235|<techmap.v>:260|<techmap.v>:229" *)
  wire _0594_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260" *)
  wire [3:0] _0595_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:221" *)
  wire _0596_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:221" *)
  wire _0597_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:221" *)
  wire _0598_;
  (* src = "cfloat8_mul.v:363|<techmap.v>:260|<techmap.v>:222" *)
  wire _0599_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:260" *)
  wire [3:0] _0600_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:260|<techmap.v>:221" *)
  wire _0601_;
  (* src = "cfloat8_mul.v:375|<techmap.v>:260|<techmap.v>:229" *)
  wire _0602_;
  (* src = "cfloat8_mul.v:232" *)
  wire [3:0] _0603_;
  (* src = "cfloat8_mul.v:358" *)
  wire [2:0] _0604_;
  (* src = "cfloat8_mul.v:358" *)
  wire [2:0] _0605_;
  (* src = "cfloat8_mul.v:358" *)
  wire [2:0] _0606_;
  (* src = "cfloat8_mul.v:358" *)
  wire [2:0] _0607_;
  (* src = "cfloat8_mul.v:358" *)
  wire [2:0] _0608_;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_stage1;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_stage2;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_stage3;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_stage4;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_stage5;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_RL_trial;
  (* src = "cfloat8_mul.v:142" *)
  wire CAN_FIRE_send;
  (* src = "cfloat8_mul.v:43" *)
  input CLK;
  (* src = "cfloat8_mul.v:48" *)
  input EN_send;
  (* src = "cfloat8_mul.v:168" *)
  wire [5:0] IF_0_CONCAT_IF_final_man_5_BIT_5_7_THEN_0_ELSE_ETC___d64;
  (* src = "cfloat8_mul.v:177" *)
  wire [2:0] IF_final_man_5_BIT_5_7_THEN_0_ELSE_IF_final_ma_ETC___d59;
  (* src = "cfloat8_mul.v:161" *)
  wire \MUX_final_exp$write_1__SEL_1 ;
  (* src = "cfloat8_mul.v:158" *)
  wire [3:0] \MUX_final_exp$write_1__VAL_1 ;
  (* src = "cfloat8_mul.v:159" *)
  wire [3:0] \MUX_final_exp$write_1__VAL_2 ;
  (* src = "cfloat8_mul.v:161" *)
  wire \MUX_stage$write_1__SEL_2 ;
  (* src = "cfloat8_mul.v:161" *)
  wire \MUX_stage$write_1__SEL_3 ;
  (* src = "cfloat8_mul.v:161" *)
  wire \MUX_stage$write_1__SEL_4 ;
  (* src = "cfloat8_mul.v:160" *)
  wire [2:0] \MUX_stage$write_1__VAL_2 ;
  (* src = "cfloat8_mul.v:167" *)
  (* unused_bits = "4 5 6 7" *)
  wire [7:0] NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32;
  (* src = "cfloat8_mul.v:53" *)
  output RDY_receive;
  (* src = "cfloat8_mul.v:49" *)
  output RDY_send;
  (* src = "cfloat8_mul.v:44" *)
  input RST_N;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_stage1;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_stage2;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_stage3;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_stage4;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_stage5;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_RL_trial;
  (* src = "cfloat8_mul.v:142" *)
  wire WILL_FIRE_send;
  (* src = "cfloat8_mul.v:172" *)
  wire [3:0] count_temp__h2134;
  (* src = "cfloat8_mul.v:60" *)
  wire [3:0] exp_op1;
  (* src = "cfloat8_mul.v:61" *)
  wire [3:0] \exp_op1$D_IN ;
  (* src = "cfloat8_mul.v:62" *)
  wire \exp_op1$EN ;
  (* src = "cfloat8_mul.v:65" *)
  wire [3:0] exp_op2;
  (* src = "cfloat8_mul.v:66" *)
  wire [3:0] \exp_op2$D_IN ;
  (* src = "cfloat8_mul.v:67" *)
  wire \exp_op2$EN ;
  (* src = "cfloat8_mul.v:72" *)
  wire \final_bias$EN ;
  (* src = "cfloat8_mul.v:75" *)
  wire [3:0] final_exp;
  (* src = "cfloat8_mul.v:76" *)
  wire [3:0] \final_exp$D_IN ;
  (* src = "cfloat8_mul.v:77" *)
  wire \final_exp$EN ;
  (* src = "cfloat8_mul.v:80" *)
  wire [7:0] final_man;
  (* src = "cfloat8_mul.v:81" *)
  wire [7:0] \final_man$D_IN ;
  (* src = "cfloat8_mul.v:82" *)
  wire \final_man$EN ;
  (* src = "cfloat8_mul.v:85" *)
  wire [7:0] final_output;
  (* src = "cfloat8_mul.v:86" *)
  wire [7:0] \final_output$D_IN ;
  (* src = "cfloat8_mul.v:87" *)
  wire \final_output$EN ;
  (* src = "cfloat8_mul.v:90" *)
  wire final_sign;
  (* src = "cfloat8_mul.v:91" *)
  wire \final_sign$D_IN ;
  (* src = "cfloat8_mul.v:91" *)
  wire \final_sign$EN ;
  (* src = "cfloat8_mul.v:179" *)
  wire hidden_bit_op1__h1397;
  (* src = "cfloat8_mul.v:179" *)
  wire hidden_bit_op2__h1398;
  (* src = "cfloat8_mul.v:172" *)
  wire [3:0] inter_mantissa1__h1465;
  (* src = "cfloat8_mul.v:172" *)
  wire [3:0] inter_mantissa2__h1466;
  (* src = "cfloat8_mul.v:94" *)
  wire [2:0] man_op1;
  (* src = "cfloat8_mul.v:95" *)
  wire [2:0] \man_op1$D_IN ;
  (* src = "cfloat8_mul.v:96" *)
  wire \man_op1$EN ;
  (* src = "cfloat8_mul.v:99" *)
  wire [2:0] man_op2;
  (* src = "cfloat8_mul.v:100" *)
  wire [2:0] \man_op2$D_IN ;
  (* src = "cfloat8_mul.v:101" *)
  wire \man_op2$EN ;
  (* src = "cfloat8_mul.v:104" *)
  wire [3:0] normalized_count;
  (* src = "cfloat8_mul.v:105" *)
  wire [3:0] \normalized_count$D_IN ;
  (* src = "cfloat8_mul.v:106" *)
  wire \normalized_count$EN ;
  (* src = "cfloat8_mul.v:109" *)
  wire [5:0] normalized_man;
  (* src = "cfloat8_mul.v:110" *)
  wire [5:0] \normalized_man$D_IN ;
  (* src = "cfloat8_mul.v:111" *)
  wire \normalized_man$EN ;
  (* src = "cfloat8_mul.v:114" *)
  wire [2:0] output_man;
  (* src = "cfloat8_mul.v:115" *)
  wire [2:0] \output_man$D_IN ;
  (* src = "cfloat8_mul.v:116" *)
  wire \output_man$EN ;
  (* src = "cfloat8_mul.v:52" *)
  output [7:0] receive;
  (* src = "cfloat8_mul.v:119" *)
  (* unused_bits = "0 1 2 3" *)
  wire [20:0] rg_operands;
  (* src = "cfloat8_mul.v:120" *)
  (* unused_bits = "0 1 2 3" *)
  wire [20:0] \rg_operands$D_IN ;
  (* src = "cfloat8_mul.v:121" *)
  wire \rg_operands$EN ;
  (* src = "cfloat8_mul.v:124" *)
  wire [2:0] rounded_man;
  (* src = "cfloat8_mul.v:125" *)
  wire [2:0] \rounded_man$D_IN ;
  (* src = "cfloat8_mul.v:126" *)
  wire \rounded_man$EN ;
  (* src = "cfloat8_mul.v:177" *)
  wire [2:0] rounded_value__h3835;
  (* src = "cfloat8_mul.v:47" *)
  input [20:0] send_data_input;
  (* src = "cfloat8_mul.v:129" *)
  wire sign_op1;
  (* src = "cfloat8_mul.v:130" *)
  wire \sign_op1$D_IN ;
  (* src = "cfloat8_mul.v:130" *)
  wire \sign_op1$EN ;
  (* src = "cfloat8_mul.v:133" *)
  wire sign_op2;
  (* src = "cfloat8_mul.v:134" *)
  wire \sign_op2$D_IN ;
  (* src = "cfloat8_mul.v:134" *)
  wire \sign_op2$EN ;
  (* src = "cfloat8_mul.v:137" *)
  wire [2:0] stage;
  (* src = "cfloat8_mul.v:138" *)
  wire [2:0] \stage$D_IN ;
  (* src = "cfloat8_mul.v:139" *)
  wire \stage$EN ;
  (* src = "cfloat8_mul.v:168" *)
  wire [5:0] x__h1975;
  (* src = "cfloat8_mul.v:172" *)
  wire [3:0] x__h2046;
  (* src = "cfloat8_mul.v:168" *)
  wire [5:0] x__h3221;
  (* src = "cfloat8_mul.v:172" *)
  wire [3:0] x__h3295;
  (* src = "cfloat8_mul.v:168" *)
  wire [5:0] x__h3335;
  BUFX2 _0609_ (
    .A(_0081_),
    .Y(_0117_)
  );
  INVX2 _0610_ (
    .A(_0117_),
    .Y(_0118_)
  );
  INVX1 _0611_ (
    .A(_0498_),
    .Y(_0119_)
  );
  INVX1 _0612_ (
    .A(_0496_),
    .Y(_0120_)
  );
  NOR2X1 _0613_ (
    .A(_0120_),
    .B(_0497_),
    .Y(_0121_)
  );
  AND2X2 _0614_ (
    .A(_0119_),
    .B(_0121_),
    .Y(_0122_)
  );
  MUX2X1 _0615_ (
    .A(_0467_),
    .B(_0494_),
    .S(_0122_),
    .Y(_0123_)
  );
  NOR2X1 _0616_ (
    .A(_0118_),
    .B(_0123_),
    .Y(_0075_)
  );
  MUX2X1 _0617_ (
    .A(_0459_),
    .B(_0495_),
    .S(_0122_),
    .Y(_0124_)
  );
  NOR2X1 _0618_ (
    .A(_0118_),
    .B(_0124_),
    .Y(_0076_)
  );
  INVX1 _0619_ (
    .A(_0468_),
    .Y(_0125_)
  );
  NAND2X1 _0620_ (
    .A(_0498_),
    .B(_0121_),
    .Y(_0126_)
  );
  BUFX2 _0621_ (
    .A(_0126_),
    .Y(_0127_)
  );
  NOR2X1 _0622_ (
    .A(_0125_),
    .B(_0127_),
    .Y(_0128_)
  );
  OR2X2 _0623_ (
    .A(_0453_),
    .B(_0454_),
    .Y(_0129_)
  );
  NAND2X1 _0624_ (
    .A(_0453_),
    .B(_0454_),
    .Y(_0130_)
  );
  NAND2X1 _0625_ (
    .A(_0129_),
    .B(_0130_),
    .Y(_0131_)
  );
  BUFX2 _0626_ (
    .A(_0117_),
    .Y(_0132_)
  );
  OAI21X1 _0627_ (
    .A(_0474_),
    .B(_0128_),
    .C(_0132_),
    .Y(_0133_)
  );
  AOI21X1 _0628_ (
    .A(_0128_),
    .B(_0131_),
    .C(_0133_),
    .Y(_0072_)
  );
  BUFX2 _0629_ (
    .A(_0101_),
    .Y(_0134_)
  );
  BUFX2 _0630_ (
    .A(_0134_),
    .Y(_0135_)
  );
  BUFX2 _0631_ (
    .A(_0095_),
    .Y(_0136_)
  );
  BUFX2 _0632_ (
    .A(_0093_),
    .Y(_0137_)
  );
  NOR2X1 _0633_ (
    .A(_0137_),
    .B(_0092_),
    .Y(_0138_)
  );
  BUFX2 _0634_ (
    .A(_0091_),
    .Y(_0139_)
  );
  BUFX2 _0635_ (
    .A(_0090_),
    .Y(_0140_)
  );
  NOR2X1 _0636_ (
    .A(_0139_),
    .B(_0140_),
    .Y(_0141_)
  );
  AND2X2 _0637_ (
    .A(_0138_),
    .B(_0141_),
    .Y(_0142_)
  );
  BUFX2 _0638_ (
    .A(_0094_),
    .Y(_0143_)
  );
  OAI21X1 _0639_ (
    .A(_0100_),
    .B(_0142_),
    .C(_0143_),
    .Y(_0144_)
  );
  NAND2X1 _0640_ (
    .A(_0120_),
    .B(_0498_),
    .Y(_0145_)
  );
  NOR2X1 _0641_ (
    .A(_0497_),
    .B(_0145_),
    .Y(_0146_)
  );
  OAI21X1 _0642_ (
    .A(_0135_),
    .B(_0144_),
    .C(_0146_),
    .Y(_0147_)
  );
  AOI21X1 _0643_ (
    .A(_0135_),
    .B(_0136_),
    .C(_0147_),
    .Y(_0148_)
  );
  BUFX2 _0644_ (
    .A(_0146_),
    .Y(_0149_)
  );
  BUFX2 _0645_ (
    .A(_0117_),
    .Y(_0150_)
  );
  BUFX2 _0646_ (
    .A(_0150_),
    .Y(_0151_)
  );
  OAI21X1 _0647_ (
    .A(_0451_),
    .B(_0149_),
    .C(_0151_),
    .Y(_0152_)
  );
  NOR2X1 _0648_ (
    .A(_0148_),
    .B(_0152_),
    .Y(_0049_)
  );
  BUFX2 _0649_ (
    .A(_0114_),
    .Y(_0153_)
  );
  NAND2X1 _0650_ (
    .A(_0496_),
    .B(_0497_),
    .Y(_0154_)
  );
  NOR2X1 _0651_ (
    .A(_0498_),
    .B(_0154_),
    .Y(_0155_)
  );
  NOR2X1 _0652_ (
    .A(_0118_),
    .B(_0155_),
    .Y(_0156_)
  );
  BUFX2 _0653_ (
    .A(_0156_),
    .Y(_0157_)
  );
  AND2X2 _0654_ (
    .A(_0150_),
    .B(_0155_),
    .Y(_0158_)
  );
  AOI22X1 _0655_ (
    .A(_0153_),
    .B(_0157_),
    .C(_0158_),
    .D(_0469_),
    .Y(_0159_)
  );
  INVX1 _0656_ (
    .A(_0159_),
    .Y(_0046_)
  );
  BUFX2 _0657_ (
    .A(_0111_),
    .Y(_0160_)
  );
  AOI22X1 _0658_ (
    .A(_0160_),
    .B(_0157_),
    .C(_0158_),
    .D(_0460_),
    .Y(_0161_)
  );
  INVX1 _0659_ (
    .A(_0161_),
    .Y(_0043_)
  );
  XNOR2X1 _0660_ (
    .A(_0495_),
    .B(_0494_),
    .Y(_0162_)
  );
  OAI21X1 _0661_ (
    .A(_0110_),
    .B(_0122_),
    .C(_0132_),
    .Y(_0163_)
  );
  AOI21X1 _0662_ (
    .A(_0122_),
    .B(_0162_),
    .C(_0163_),
    .Y(_0042_)
  );
  INVX1 _0663_ (
    .A(_0103_),
    .Y(_0164_)
  );
  BUFX2 _0664_ (
    .A(_0127_),
    .Y(_0165_)
  );
  OAI21X1 _0665_ (
    .A(_0475_),
    .B(_0165_),
    .C(_0132_),
    .Y(_0166_)
  );
  AOI21X1 _0666_ (
    .A(_0164_),
    .B(_0165_),
    .C(_0166_),
    .Y(_0035_)
  );
  INVX1 _0667_ (
    .A(_0102_),
    .Y(_0167_)
  );
  OAI21X1 _0668_ (
    .A(_0474_),
    .B(_0165_),
    .C(_0132_),
    .Y(_0168_)
  );
  AOI21X1 _0669_ (
    .A(_0167_),
    .B(_0165_),
    .C(_0168_),
    .Y(_0034_)
  );
  NAND2X1 _0670_ (
    .A(_0150_),
    .B(_0155_),
    .Y(_0169_)
  );
  NAND2X1 _0671_ (
    .A(_0160_),
    .B(_0153_),
    .Y(_0170_)
  );
  NAND2X1 _0672_ (
    .A(_0143_),
    .B(_0157_),
    .Y(_0171_)
  );
  OAI21X1 _0673_ (
    .A(_0169_),
    .B(_0170_),
    .C(_0171_),
    .Y(_0026_)
  );
  INVX1 _0674_ (
    .A(_0146_),
    .Y(_0172_)
  );
  INVX1 _0675_ (
    .A(_0100_),
    .Y(_0173_)
  );
  NOR2X1 _0676_ (
    .A(_0173_),
    .B(_0134_),
    .Y(_0174_)
  );
  NAND2X1 _0677_ (
    .A(_0086_),
    .B(_0082_),
    .Y(_0175_)
  );
  XNOR2X1 _0678_ (
    .A(_0083_),
    .B(_0087_),
    .Y(_0176_)
  );
  XNOR2X1 _0679_ (
    .A(_0175_),
    .B(_0176_),
    .Y(_0177_)
  );
  OAI21X1 _0680_ (
    .A(_0172_),
    .B(_0174_),
    .C(_0177_),
    .Y(_0178_)
  );
  BUFX2 _0681_ (
    .A(_0098_),
    .Y(_0179_)
  );
  INVX1 _0682_ (
    .A(_0179_),
    .Y(_0180_)
  );
  BUFX2 _0683_ (
    .A(_0099_),
    .Y(_0181_)
  );
  BUFX2 _0684_ (
    .A(_0097_),
    .Y(_0182_)
  );
  OR2X2 _0685_ (
    .A(_0182_),
    .B(_0181_),
    .Y(_0183_)
  );
  INVX1 _0686_ (
    .A(_0136_),
    .Y(_0184_)
  );
  BUFX2 _0687_ (
    .A(_0096_),
    .Y(_0185_)
  );
  AOI21X1 _0688_ (
    .A(_0143_),
    .B(_0184_),
    .C(_0185_),
    .Y(_0186_)
  );
  OAI22X1 _0689_ (
    .A(_0180_),
    .B(_0181_),
    .C(_0183_),
    .D(_0186_),
    .Y(_0187_)
  );
  OR2X2 _0690_ (
    .A(_0183_),
    .B(_0186_),
    .Y(_0188_)
  );
  NOR2X1 _0691_ (
    .A(_0143_),
    .B(_0136_),
    .Y(_0189_)
  );
  OR2X2 _0692_ (
    .A(_0185_),
    .B(_0182_),
    .Y(_0190_)
  );
  NOR2X1 _0693_ (
    .A(_0179_),
    .B(_0181_),
    .Y(_0191_)
  );
  OAI21X1 _0694_ (
    .A(_0189_),
    .B(_0190_),
    .C(_0191_),
    .Y(_0192_)
  );
  MUX2X1 _0695_ (
    .A(_0187_),
    .B(_0188_),
    .S(_0192_),
    .Y(_0193_)
  );
  XNOR2X1 _0696_ (
    .A(_0139_),
    .B(_0193_),
    .Y(_0194_)
  );
  NOR2X1 _0697_ (
    .A(_0140_),
    .B(_0187_),
    .Y(_0195_)
  );
  XNOR2X1 _0698_ (
    .A(_0194_),
    .B(_0195_),
    .Y(_0196_)
  );
  AND2X2 _0699_ (
    .A(_0140_),
    .B(_0187_),
    .Y(_0197_)
  );
  AOI21X1 _0700_ (
    .A(_0139_),
    .B(_0193_),
    .C(_0197_),
    .Y(_0198_)
  );
  INVX1 _0701_ (
    .A(_0182_),
    .Y(_0199_)
  );
  NAND2X1 _0702_ (
    .A(_0199_),
    .B(_0191_),
    .Y(_0200_)
  );
  BUFX2 _0703_ (
    .A(_0092_),
    .Y(_0201_)
  );
  OAI22X1 _0704_ (
    .A(_0139_),
    .B(_0193_),
    .C(_0200_),
    .D(_0201_),
    .Y(_0202_)
  );
  OAI21X1 _0705_ (
    .A(_0179_),
    .B(_0183_),
    .C(_0092_),
    .Y(_0203_)
  );
  OAI21X1 _0706_ (
    .A(_0198_),
    .B(_0202_),
    .C(_0203_),
    .Y(_0204_)
  );
  INVX1 _0707_ (
    .A(_0134_),
    .Y(_0205_)
  );
  OAI21X1 _0708_ (
    .A(_0137_),
    .B(_0204_),
    .C(_0205_),
    .Y(_0206_)
  );
  OAI21X1 _0709_ (
    .A(_0173_),
    .B(_0134_),
    .C(_0146_),
    .Y(_0207_)
  );
  INVX1 _0710_ (
    .A(_0139_),
    .Y(_0208_)
  );
  INVX1 _0711_ (
    .A(_0140_),
    .Y(_0209_)
  );
  NOR2X1 _0712_ (
    .A(_0208_),
    .B(_0209_),
    .Y(_0210_)
  );
  BUFX2 _0713_ (
    .A(_0139_),
    .Y(_0211_)
  );
  BUFX2 _0714_ (
    .A(_0140_),
    .Y(_0212_)
  );
  OAI21X1 _0715_ (
    .A(_0211_),
    .B(_0212_),
    .C(_0134_),
    .Y(_0213_)
  );
  NOR2X1 _0716_ (
    .A(_0210_),
    .B(_0213_),
    .Y(_0214_)
  );
  NOR2X1 _0717_ (
    .A(_0207_),
    .B(_0214_),
    .Y(_0215_)
  );
  OAI21X1 _0718_ (
    .A(_0196_),
    .B(_0206_),
    .C(_0215_),
    .Y(_0216_)
  );
  NAND3X1 _0719_ (
    .A(_0120_),
    .B(_0119_),
    .C(_0497_),
    .Y(_0217_)
  );
  BUFX2 _0720_ (
    .A(_0217_),
    .Y(_0218_)
  );
  AND2X2 _0721_ (
    .A(_0207_),
    .B(_0218_),
    .Y(_0219_)
  );
  AOI21X1 _0722_ (
    .A(_0178_),
    .B(_0216_),
    .C(_0219_),
    .Y(_0220_)
  );
  OAI21X1 _0723_ (
    .A(_0172_),
    .B(_0174_),
    .C(_0218_),
    .Y(_0221_)
  );
  OAI21X1 _0724_ (
    .A(_0211_),
    .B(_0221_),
    .C(_0151_),
    .Y(_0222_)
  );
  NOR2X1 _0725_ (
    .A(_0220_),
    .B(_0222_),
    .Y(_0023_)
  );
  INVX1 _0726_ (
    .A(_0207_),
    .Y(_0223_)
  );
  XOR2X1 _0727_ (
    .A(_0086_),
    .B(_0082_),
    .Y(_0224_)
  );
  NOR2X1 _0728_ (
    .A(_0137_),
    .B(_0204_),
    .Y(_0225_)
  );
  OAI21X1 _0729_ (
    .A(_0195_),
    .B(_0197_),
    .C(_0205_),
    .Y(_0226_)
  );
  AOI21X1 _0730_ (
    .A(_0209_),
    .B(_0135_),
    .C(_0207_),
    .Y(_0227_)
  );
  OAI21X1 _0731_ (
    .A(_0225_),
    .B(_0226_),
    .C(_0227_),
    .Y(_0228_)
  );
  OAI21X1 _0732_ (
    .A(_0223_),
    .B(_0224_),
    .C(_0228_),
    .Y(_0229_)
  );
  OAI21X1 _0733_ (
    .A(_0212_),
    .B(_0221_),
    .C(_0132_),
    .Y(_0230_)
  );
  AOI21X1 _0734_ (
    .A(_0221_),
    .B(_0229_),
    .C(_0230_),
    .Y(_0022_)
  );
  INVX1 _0735_ (
    .A(_0086_),
    .Y(_0231_)
  );
  BUFX2 _0736_ (
    .A(_0217_),
    .Y(_0232_)
  );
  OAI21X1 _0737_ (
    .A(_0472_),
    .B(_0232_),
    .C(_0132_),
    .Y(_0233_)
  );
  AOI21X1 _0738_ (
    .A(_0231_),
    .B(_0232_),
    .C(_0233_),
    .Y(_0018_)
  );
  INVX1 _0739_ (
    .A(_0082_),
    .Y(_0234_)
  );
  OAI21X1 _0740_ (
    .A(_0463_),
    .B(_0232_),
    .C(_0132_),
    .Y(_0235_)
  );
  AOI21X1 _0741_ (
    .A(_0234_),
    .B(_0232_),
    .C(_0235_),
    .Y(_0014_)
  );
  XNOR2X1 _0742_ (
    .A(_0455_),
    .B(_0130_),
    .Y(_0236_)
  );
  MUX2X1 _0743_ (
    .A(_0236_),
    .B(_0475_),
    .S(_0128_),
    .Y(_0237_)
  );
  NOR2X1 _0744_ (
    .A(_0118_),
    .B(_0237_),
    .Y(_0073_)
  );
  BUFX2 _0745_ (
    .A(_0080_),
    .Y(_0238_)
  );
  NOR2X1 _0746_ (
    .A(_0142_),
    .B(_0217_),
    .Y(_0239_)
  );
  NOR2X1 _0747_ (
    .A(_0238_),
    .B(_0239_),
    .Y(_0240_)
  );
  NOR2X1 _0748_ (
    .A(_0451_),
    .B(_0455_),
    .Y(_0241_)
  );
  NOR2X1 _0749_ (
    .A(_0452_),
    .B(_0456_),
    .Y(_0242_)
  );
  NAND2X1 _0750_ (
    .A(_0241_),
    .B(_0242_),
    .Y(_0243_)
  );
  OAI21X1 _0751_ (
    .A(_0129_),
    .B(_0243_),
    .C(_0146_),
    .Y(_0244_)
  );
  NAND2X1 _0752_ (
    .A(_0191_),
    .B(_0189_),
    .Y(_0245_)
  );
  NOR2X1 _0753_ (
    .A(_0100_),
    .B(_0134_),
    .Y(_0246_)
  );
  INVX1 _0754_ (
    .A(_0246_),
    .Y(_0247_)
  );
  OR2X2 _0755_ (
    .A(_0190_),
    .B(_0247_),
    .Y(_0248_)
  );
  OAI21X1 _0756_ (
    .A(_0245_),
    .B(_0248_),
    .C(_0155_),
    .Y(_0249_)
  );
  AND2X2 _0757_ (
    .A(_0244_),
    .B(_0249_),
    .Y(_0250_)
  );
  NAND2X1 _0758_ (
    .A(_0240_),
    .B(_0250_),
    .Y(_0251_)
  );
  NOR2X1 _0759_ (
    .A(_0122_),
    .B(_0251_),
    .Y(_0252_)
  );
  NAND2X1 _0760_ (
    .A(_0244_),
    .B(_0240_),
    .Y(_0253_)
  );
  AOI21X1 _0761_ (
    .A(_0496_),
    .B(_0252_),
    .C(_0253_),
    .Y(_0254_)
  );
  NOR2X1 _0762_ (
    .A(_0118_),
    .B(_0254_),
    .Y(_0077_)
  );
  INVX1 _0763_ (
    .A(_0193_),
    .Y(_0255_)
  );
  MUX2X1 _0764_ (
    .A(_0185_),
    .B(_0136_),
    .S(_0187_),
    .Y(_0256_)
  );
  AND2X2 _0765_ (
    .A(_0143_),
    .B(_0187_),
    .Y(_0257_)
  );
  OAI21X1 _0766_ (
    .A(_0188_),
    .B(_0192_),
    .C(_0257_),
    .Y(_0258_)
  );
  OAI21X1 _0767_ (
    .A(_0255_),
    .B(_0256_),
    .C(_0258_),
    .Y(_0259_)
  );
  INVX1 _0768_ (
    .A(_0259_),
    .Y(_0260_)
  );
  OAI21X1 _0769_ (
    .A(_0137_),
    .B(_0204_),
    .C(_0200_),
    .Y(_0261_)
  );
  NAND2X1 _0770_ (
    .A(_0140_),
    .B(_0184_),
    .Y(_0262_)
  );
  OAI21X1 _0771_ (
    .A(_0212_),
    .B(_0185_),
    .C(_0262_),
    .Y(_0263_)
  );
  NAND3X1 _0772_ (
    .A(_0211_),
    .B(_0209_),
    .C(_0143_),
    .Y(_0264_)
  );
  OAI21X1 _0773_ (
    .A(_0211_),
    .B(_0263_),
    .C(_0264_),
    .Y(_0265_)
  );
  NAND2X1 _0774_ (
    .A(_0138_),
    .B(_0265_),
    .Y(_0266_)
  );
  OAI22X1 _0775_ (
    .A(_0260_),
    .B(_0261_),
    .C(_0266_),
    .D(_0204_),
    .Y(_0267_)
  );
  AOI22X1 _0776_ (
    .A(_0135_),
    .B(_0182_),
    .C(_0174_),
    .D(_0185_),
    .Y(_0268_)
  );
  NAND2X1 _0777_ (
    .A(_0149_),
    .B(_0268_),
    .Y(_0269_)
  );
  AOI21X1 _0778_ (
    .A(_0246_),
    .B(_0267_),
    .C(_0269_),
    .Y(_0270_)
  );
  OAI21X1 _0779_ (
    .A(_0453_),
    .B(_0149_),
    .C(_0151_),
    .Y(_0271_)
  );
  NOR2X1 _0780_ (
    .A(_0270_),
    .B(_0271_),
    .Y(_0051_)
  );
  NAND2X1 _0781_ (
    .A(_0184_),
    .B(_0187_),
    .Y(_0272_)
  );
  OAI21X1 _0782_ (
    .A(_0143_),
    .B(_0187_),
    .C(_0272_),
    .Y(_0273_)
  );
  NOR2X1 _0783_ (
    .A(_0180_),
    .B(_0181_),
    .Y(_0274_)
  );
  INVX1 _0784_ (
    .A(_0187_),
    .Y(_0275_)
  );
  AOI22X1 _0785_ (
    .A(_0182_),
    .B(_0274_),
    .C(_0275_),
    .D(_0185_),
    .Y(_0276_)
  );
  MUX2X1 _0786_ (
    .A(_0273_),
    .B(_0276_),
    .S(_0255_),
    .Y(_0277_)
  );
  MUX2X1 _0787_ (
    .A(_0185_),
    .B(_0182_),
    .S(_0212_),
    .Y(_0278_)
  );
  NAND2X1 _0788_ (
    .A(_0208_),
    .B(_0278_),
    .Y(_0279_)
  );
  MUX2X1 _0789_ (
    .A(_0143_),
    .B(_0136_),
    .S(_0212_),
    .Y(_0280_)
  );
  NAND2X1 _0790_ (
    .A(_0211_),
    .B(_0280_),
    .Y(_0281_)
  );
  NAND3X1 _0791_ (
    .A(_0138_),
    .B(_0279_),
    .C(_0281_),
    .Y(_0282_)
  );
  AOI21X1 _0792_ (
    .A(_0225_),
    .B(_0282_),
    .C(_0247_),
    .Y(_0283_)
  );
  OAI21X1 _0793_ (
    .A(_0225_),
    .B(_0277_),
    .C(_0283_),
    .Y(_0284_)
  );
  AOI22X1 _0794_ (
    .A(_0135_),
    .B(_0179_),
    .C(_0174_),
    .D(_0182_),
    .Y(_0285_)
  );
  AND2X2 _0795_ (
    .A(_0149_),
    .B(_0285_),
    .Y(_0286_)
  );
  OAI21X1 _0796_ (
    .A(_0454_),
    .B(_0149_),
    .C(_0132_),
    .Y(_0287_)
  );
  AOI21X1 _0797_ (
    .A(_0284_),
    .B(_0286_),
    .C(_0287_),
    .Y(_0052_)
  );
  OAI21X1 _0798_ (
    .A(_0180_),
    .B(_0181_),
    .C(_0199_),
    .Y(_0288_)
  );
  OAI21X1 _0799_ (
    .A(_0257_),
    .B(_0288_),
    .C(_0193_),
    .Y(_0289_)
  );
  OAI21X1 _0800_ (
    .A(_0193_),
    .B(_0256_),
    .C(_0289_),
    .Y(_0290_)
  );
  AOI21X1 _0801_ (
    .A(_0212_),
    .B(_0199_),
    .C(_0211_),
    .Y(_0291_)
  );
  OAI21X1 _0802_ (
    .A(_0212_),
    .B(_0179_),
    .C(_0291_),
    .Y(_0292_)
  );
  OAI21X1 _0803_ (
    .A(_0208_),
    .B(_0263_),
    .C(_0292_),
    .Y(_0293_)
  );
  NAND2X1 _0804_ (
    .A(_0143_),
    .B(_0141_),
    .Y(_0294_)
  );
  NAND2X1 _0805_ (
    .A(_0201_),
    .B(_0294_),
    .Y(_0295_)
  );
  OAI21X1 _0806_ (
    .A(_0201_),
    .B(_0293_),
    .C(_0295_),
    .Y(_0296_)
  );
  AOI21X1 _0807_ (
    .A(_0225_),
    .B(_0296_),
    .C(_0247_),
    .Y(_0297_)
  );
  OAI21X1 _0808_ (
    .A(_0225_),
    .B(_0290_),
    .C(_0297_),
    .Y(_0298_)
  );
  AOI22X1 _0809_ (
    .A(_0135_),
    .B(_0181_),
    .C(_0174_),
    .D(_0179_),
    .Y(_0299_)
  );
  AND2X2 _0810_ (
    .A(_0149_),
    .B(_0299_),
    .Y(_0300_)
  );
  OAI21X1 _0811_ (
    .A(_0455_),
    .B(_0149_),
    .C(_0132_),
    .Y(_0301_)
  );
  AOI21X1 _0812_ (
    .A(_0298_),
    .B(_0300_),
    .C(_0301_),
    .Y(_0053_)
  );
  OR2X2 _0813_ (
    .A(_0255_),
    .B(_0273_),
    .Y(_0302_)
  );
  NOR2X1 _0814_ (
    .A(_0183_),
    .B(_0302_),
    .Y(_0303_)
  );
  NAND2X1 _0815_ (
    .A(_0179_),
    .B(_0181_),
    .Y(_0304_)
  );
  OAI21X1 _0816_ (
    .A(_0193_),
    .B(_0276_),
    .C(_0304_),
    .Y(_0305_)
  );
  OR2X2 _0817_ (
    .A(_0303_),
    .B(_0305_),
    .Y(_0306_)
  );
  AOI21X1 _0818_ (
    .A(_0212_),
    .B(_0180_),
    .C(_0211_),
    .Y(_0307_)
  );
  OAI21X1 _0819_ (
    .A(_0212_),
    .B(_0181_),
    .C(_0307_),
    .Y(_0308_)
  );
  OAI21X1 _0820_ (
    .A(_0208_),
    .B(_0278_),
    .C(_0308_),
    .Y(_0309_)
  );
  OAI21X1 _0821_ (
    .A(_0211_),
    .B(_0280_),
    .C(_0201_),
    .Y(_0310_)
  );
  OAI21X1 _0822_ (
    .A(_0201_),
    .B(_0309_),
    .C(_0310_),
    .Y(_0311_)
  );
  AOI21X1 _0823_ (
    .A(_0225_),
    .B(_0311_),
    .C(_0247_),
    .Y(_0312_)
  );
  OAI21X1 _0824_ (
    .A(_0225_),
    .B(_0306_),
    .C(_0312_),
    .Y(_0313_)
  );
  AOI21X1 _0825_ (
    .A(_0181_),
    .B(_0174_),
    .C(_0172_),
    .Y(_0314_)
  );
  OAI21X1 _0826_ (
    .A(_0456_),
    .B(_0149_),
    .C(_0132_),
    .Y(_0315_)
  );
  AOI21X1 _0827_ (
    .A(_0313_),
    .B(_0314_),
    .C(_0315_),
    .Y(_0054_)
  );
  BUFX2 _0828_ (
    .A(_0238_),
    .Y(_0316_)
  );
  NOR2X1 _0829_ (
    .A(_0316_),
    .B(_0461_),
    .Y(_0317_)
  );
  INVX2 _0830_ (
    .A(_0238_),
    .Y(_0318_)
  );
  BUFX2 _0831_ (
    .A(_0318_),
    .Y(_0319_)
  );
  OAI21X1 _0832_ (
    .A(_0319_),
    .B(_0481_),
    .C(_0151_),
    .Y(_0320_)
  );
  NOR2X1 _0833_ (
    .A(_0317_),
    .B(_0320_),
    .Y(_0059_)
  );
  NOR2X1 _0834_ (
    .A(_0316_),
    .B(_0462_),
    .Y(_0321_)
  );
  OAI21X1 _0835_ (
    .A(_0319_),
    .B(_0482_),
    .C(_0151_),
    .Y(_0322_)
  );
  NOR2X1 _0836_ (
    .A(_0321_),
    .B(_0322_),
    .Y(_0060_)
  );
  NOR2X1 _0837_ (
    .A(_0316_),
    .B(_0463_),
    .Y(_0323_)
  );
  OAI21X1 _0838_ (
    .A(_0319_),
    .B(_0483_),
    .C(_0151_),
    .Y(_0324_)
  );
  NOR2X1 _0839_ (
    .A(_0323_),
    .B(_0324_),
    .Y(_0061_)
  );
  NOR2X1 _0840_ (
    .A(_0316_),
    .B(_0464_),
    .Y(_0325_)
  );
  OAI21X1 _0841_ (
    .A(_0319_),
    .B(_0484_),
    .C(_0151_),
    .Y(_0326_)
  );
  NOR2X1 _0842_ (
    .A(_0325_),
    .B(_0326_),
    .Y(_0062_)
  );
  NOR2X1 _0843_ (
    .A(_0316_),
    .B(_0465_),
    .Y(_0327_)
  );
  OAI21X1 _0844_ (
    .A(_0319_),
    .B(_0485_),
    .C(_0151_),
    .Y(_0328_)
  );
  NOR2X1 _0845_ (
    .A(_0327_),
    .B(_0328_),
    .Y(_0063_)
  );
  NOR2X1 _0846_ (
    .A(_0316_),
    .B(_0466_),
    .Y(_0329_)
  );
  OAI21X1 _0847_ (
    .A(_0319_),
    .B(_0486_),
    .C(_0151_),
    .Y(_0330_)
  );
  NOR2X1 _0848_ (
    .A(_0329_),
    .B(_0330_),
    .Y(_0064_)
  );
  NOR2X1 _0849_ (
    .A(_0316_),
    .B(_0467_),
    .Y(_0331_)
  );
  OAI21X1 _0850_ (
    .A(_0319_),
    .B(_0487_),
    .C(_0151_),
    .Y(_0332_)
  );
  NOR2X1 _0851_ (
    .A(_0331_),
    .B(_0332_),
    .Y(_0065_)
  );
  NOR2X1 _0852_ (
    .A(_0211_),
    .B(_0280_),
    .Y(_0333_)
  );
  NAND2X1 _0853_ (
    .A(_0138_),
    .B(_0333_),
    .Y(_0334_)
  );
  OAI21X1 _0854_ (
    .A(_0261_),
    .B(_0302_),
    .C(_0334_),
    .Y(_0335_)
  );
  AOI22X1 _0855_ (
    .A(_0135_),
    .B(_0185_),
    .C(_0136_),
    .D(_0174_),
    .Y(_0336_)
  );
  NAND2X1 _0856_ (
    .A(_0149_),
    .B(_0336_),
    .Y(_0337_)
  );
  AOI21X1 _0857_ (
    .A(_0246_),
    .B(_0335_),
    .C(_0337_),
    .Y(_0338_)
  );
  BUFX2 _0858_ (
    .A(_0150_),
    .Y(_0339_)
  );
  OAI21X1 _0859_ (
    .A(_0452_),
    .B(_0149_),
    .C(_0339_),
    .Y(_0340_)
  );
  NOR2X1 _0860_ (
    .A(_0338_),
    .B(_0340_),
    .Y(_0050_)
  );
  BUFX2 _0861_ (
    .A(_0117_),
    .Y(_0341_)
  );
  OAI21X1 _0862_ (
    .A(_0318_),
    .B(_0488_),
    .C(_0341_),
    .Y(_0342_)
  );
  AOI21X1 _0863_ (
    .A(_0319_),
    .B(_0125_),
    .C(_0342_),
    .Y(_0066_)
  );
  NAND2X1 _0864_ (
    .A(_0150_),
    .B(_0497_),
    .Y(_0343_)
  );
  NAND2X1 _0865_ (
    .A(_0150_),
    .B(_0318_),
    .Y(_0344_)
  );
  OAI21X1 _0866_ (
    .A(_0122_),
    .B(_0251_),
    .C(_0250_),
    .Y(_0345_)
  );
  OAI22X1 _0867_ (
    .A(_0251_),
    .B(_0343_),
    .C(_0344_),
    .D(_0345_),
    .Y(_0078_)
  );
  NAND3X1 _0868_ (
    .A(_0455_),
    .B(_0453_),
    .C(_0454_),
    .Y(_0346_)
  );
  XOR2X1 _0869_ (
    .A(_0456_),
    .B(_0346_),
    .Y(_0347_)
  );
  OAI21X1 _0870_ (
    .A(_0476_),
    .B(_0128_),
    .C(_0341_),
    .Y(_0348_)
  );
  AOI21X1 _0871_ (
    .A(_0128_),
    .B(_0347_),
    .C(_0348_),
    .Y(_0074_)
  );
  NOR2X1 _0872_ (
    .A(_0316_),
    .B(_0469_),
    .Y(_0349_)
  );
  OAI21X1 _0873_ (
    .A(_0319_),
    .B(_0489_),
    .C(_0339_),
    .Y(_0350_)
  );
  NOR2X1 _0874_ (
    .A(_0349_),
    .B(_0350_),
    .Y(_0067_)
  );
  NOR2X1 _0875_ (
    .A(_0238_),
    .B(_0470_),
    .Y(_0351_)
  );
  OAI21X1 _0876_ (
    .A(_0318_),
    .B(_0490_),
    .C(_0339_),
    .Y(_0352_)
  );
  NOR2X1 _0877_ (
    .A(_0351_),
    .B(_0352_),
    .Y(_0068_)
  );
  NOR2X1 _0878_ (
    .A(_0238_),
    .B(_0471_),
    .Y(_0353_)
  );
  OAI21X1 _0879_ (
    .A(_0318_),
    .B(_0491_),
    .C(_0339_),
    .Y(_0354_)
  );
  NOR2X1 _0880_ (
    .A(_0353_),
    .B(_0354_),
    .Y(_0069_)
  );
  NOR2X1 _0881_ (
    .A(_0238_),
    .B(_0472_),
    .Y(_0355_)
  );
  OAI21X1 _0882_ (
    .A(_0318_),
    .B(_0492_),
    .C(_0339_),
    .Y(_0356_)
  );
  NOR2X1 _0883_ (
    .A(_0355_),
    .B(_0356_),
    .Y(_0070_)
  );
  NOR2X1 _0884_ (
    .A(_0238_),
    .B(_0473_),
    .Y(_0357_)
  );
  OAI21X1 _0885_ (
    .A(_0318_),
    .B(_0493_),
    .C(_0339_),
    .Y(_0358_)
  );
  NOR2X1 _0886_ (
    .A(_0357_),
    .B(_0358_),
    .Y(_0071_)
  );
  NOR2X1 _0887_ (
    .A(_0238_),
    .B(_0457_),
    .Y(_0359_)
  );
  OAI21X1 _0888_ (
    .A(_0318_),
    .B(_0477_),
    .C(_0339_),
    .Y(_0360_)
  );
  NOR2X1 _0889_ (
    .A(_0359_),
    .B(_0360_),
    .Y(_0055_)
  );
  NOR2X1 _0890_ (
    .A(_0238_),
    .B(_0458_),
    .Y(_0361_)
  );
  OAI21X1 _0891_ (
    .A(_0318_),
    .B(_0478_),
    .C(_0339_),
    .Y(_0362_)
  );
  NOR2X1 _0892_ (
    .A(_0361_),
    .B(_0362_),
    .Y(_0056_)
  );
  NOR2X1 _0893_ (
    .A(_0459_),
    .B(_0316_),
    .Y(_0363_)
  );
  OAI21X1 _0894_ (
    .A(_0318_),
    .B(_0479_),
    .C(_0339_),
    .Y(_0364_)
  );
  NOR2X1 _0895_ (
    .A(_0363_),
    .B(_0364_),
    .Y(_0057_)
  );
  NOR2X1 _0896_ (
    .A(_0460_),
    .B(_0316_),
    .Y(_0365_)
  );
  OAI21X1 _0897_ (
    .A(_0480_),
    .B(_0319_),
    .C(_0339_),
    .Y(_0366_)
  );
  NOR2X1 _0898_ (
    .A(_0365_),
    .B(_0366_),
    .Y(_0058_)
  );
  INVX1 _0899_ (
    .A(_0104_),
    .Y(_0367_)
  );
  OAI21X1 _0900_ (
    .A(_0476_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0368_)
  );
  AOI21X1 _0901_ (
    .A(_0367_),
    .B(_0165_),
    .C(_0368_),
    .Y(_0036_)
  );
  INVX1 _0902_ (
    .A(_0105_),
    .Y(_0369_)
  );
  OAI21X1 _0903_ (
    .A(_0212_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0370_)
  );
  AOI21X1 _0904_ (
    .A(_0369_),
    .B(_0165_),
    .C(_0370_),
    .Y(_0037_)
  );
  INVX1 _0905_ (
    .A(_0106_),
    .Y(_0371_)
  );
  OAI21X1 _0906_ (
    .A(_0211_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0372_)
  );
  AOI21X1 _0907_ (
    .A(_0371_),
    .B(_0165_),
    .C(_0372_),
    .Y(_0038_)
  );
  INVX1 _0908_ (
    .A(_0107_),
    .Y(_0373_)
  );
  OAI21X1 _0909_ (
    .A(_0201_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0374_)
  );
  AOI21X1 _0910_ (
    .A(_0373_),
    .B(_0165_),
    .C(_0374_),
    .Y(_0039_)
  );
  INVX1 _0911_ (
    .A(_0108_),
    .Y(_0375_)
  );
  OAI21X1 _0912_ (
    .A(_0137_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0376_)
  );
  AOI21X1 _0913_ (
    .A(_0375_),
    .B(_0165_),
    .C(_0376_),
    .Y(_0040_)
  );
  INVX1 _0914_ (
    .A(_0109_),
    .Y(_0377_)
  );
  OAI21X1 _0915_ (
    .A(_0110_),
    .B(_0127_),
    .C(_0341_),
    .Y(_0378_)
  );
  AOI21X1 _0916_ (
    .A(_0377_),
    .B(_0165_),
    .C(_0378_),
    .Y(_0041_)
  );
  NAND2X1 _0917_ (
    .A(_0112_),
    .B(_0115_),
    .Y(_0379_)
  );
  AOI22X1 _0918_ (
    .A(_0153_),
    .B(_0112_),
    .C(_0115_),
    .D(_0160_),
    .Y(_0380_)
  );
  INVX1 _0919_ (
    .A(_0380_),
    .Y(_0381_)
  );
  OAI21X1 _0920_ (
    .A(_0170_),
    .B(_0379_),
    .C(_0381_),
    .Y(_0382_)
  );
  NAND2X1 _0921_ (
    .A(_0136_),
    .B(_0157_),
    .Y(_0383_)
  );
  OAI21X1 _0922_ (
    .A(_0169_),
    .B(_0382_),
    .C(_0383_),
    .Y(_0027_)
  );
  AND2X2 _0923_ (
    .A(_0160_),
    .B(_0116_),
    .Y(_0384_)
  );
  NAND2X1 _0924_ (
    .A(_0153_),
    .B(_0113_),
    .Y(_0385_)
  );
  XNOR2X1 _0925_ (
    .A(_0384_),
    .B(_0385_),
    .Y(_0386_)
  );
  AOI21X1 _0926_ (
    .A(_0160_),
    .B(_0153_),
    .C(_0379_),
    .Y(_0387_)
  );
  XNOR2X1 _0927_ (
    .A(_0386_),
    .B(_0387_),
    .Y(_0388_)
  );
  NAND2X1 _0928_ (
    .A(_0185_),
    .B(_0157_),
    .Y(_0389_)
  );
  OAI21X1 _0929_ (
    .A(_0169_),
    .B(_0388_),
    .C(_0389_),
    .Y(_0028_)
  );
  NAND2X1 _0930_ (
    .A(_0112_),
    .B(_0116_),
    .Y(_0390_)
  );
  INVX1 _0931_ (
    .A(_0087_),
    .Y(_0391_)
  );
  INVX1 _0932_ (
    .A(_0088_),
    .Y(_0392_)
  );
  INVX1 _0933_ (
    .A(_0089_),
    .Y(_0393_)
  );
  NAND3X1 _0934_ (
    .A(_0391_),
    .B(_0392_),
    .C(_0393_),
    .Y(_0394_)
  );
  OAI21X1 _0935_ (
    .A(_0086_),
    .B(_0394_),
    .C(_0160_),
    .Y(_0395_)
  );
  XNOR2X1 _0936_ (
    .A(_0390_),
    .B(_0395_),
    .Y(_0396_)
  );
  NAND3X1 _0937_ (
    .A(_0153_),
    .B(_0113_),
    .C(_0384_),
    .Y(_0397_)
  );
  INVX1 _0938_ (
    .A(_0084_),
    .Y(_0398_)
  );
  NOR2X1 _0939_ (
    .A(_0085_),
    .B(_0083_),
    .Y(_0399_)
  );
  NAND3X1 _0940_ (
    .A(_0234_),
    .B(_0398_),
    .C(_0399_),
    .Y(_0400_)
  );
  NAND3X1 _0941_ (
    .A(_0153_),
    .B(_0397_),
    .C(_0400_),
    .Y(_0401_)
  );
  OAI21X1 _0942_ (
    .A(_0397_),
    .B(_0400_),
    .C(_0401_),
    .Y(_0402_)
  );
  XNOR2X1 _0943_ (
    .A(_0396_),
    .B(_0402_),
    .Y(_0403_)
  );
  AOI21X1 _0944_ (
    .A(_0160_),
    .B(_0153_),
    .C(_0386_),
    .Y(_0404_)
  );
  NOR2X1 _0945_ (
    .A(_0379_),
    .B(_0404_),
    .Y(_0405_)
  );
  NAND2X1 _0946_ (
    .A(_0113_),
    .B(_0115_),
    .Y(_0406_)
  );
  XNOR2X1 _0947_ (
    .A(_0405_),
    .B(_0406_),
    .Y(_0407_)
  );
  XNOR2X1 _0948_ (
    .A(_0403_),
    .B(_0407_),
    .Y(_0408_)
  );
  NAND2X1 _0949_ (
    .A(_0182_),
    .B(_0157_),
    .Y(_0409_)
  );
  OAI21X1 _0950_ (
    .A(_0169_),
    .B(_0408_),
    .C(_0409_),
    .Y(_0029_)
  );
  AND2X2 _0951_ (
    .A(_0179_),
    .B(_0157_),
    .Y(_0030_)
  );
  AND2X2 _0952_ (
    .A(_0181_),
    .B(_0157_),
    .Y(_0031_)
  );
  AND2X2 _0953_ (
    .A(_0100_),
    .B(_0157_),
    .Y(_0032_)
  );
  AND2X2 _0954_ (
    .A(_0135_),
    .B(_0157_),
    .Y(_0033_)
  );
  NAND2X1 _0955_ (
    .A(_0201_),
    .B(_0210_),
    .Y(_0410_)
  );
  INVX1 _0956_ (
    .A(_0410_),
    .Y(_0411_)
  );
  OAI21X1 _0957_ (
    .A(_0201_),
    .B(_0210_),
    .C(_0135_),
    .Y(_0412_)
  );
  NOR2X1 _0958_ (
    .A(_0411_),
    .B(_0412_),
    .Y(_0413_)
  );
  NAND2X1 _0959_ (
    .A(_0139_),
    .B(_0193_),
    .Y(_0414_)
  );
  OAI21X1 _0960_ (
    .A(_0194_),
    .B(_0195_),
    .C(_0414_),
    .Y(_0415_)
  );
  XOR2X1 _0961_ (
    .A(_0201_),
    .B(_0200_),
    .Y(_0416_)
  );
  AND2X2 _0962_ (
    .A(_0415_),
    .B(_0416_),
    .Y(_0417_)
  );
  OAI22X1 _0963_ (
    .A(_0137_),
    .B(_0204_),
    .C(_0415_),
    .D(_0416_),
    .Y(_0418_)
  );
  NOR3X1 _0964_ (
    .A(_0135_),
    .B(_0417_),
    .C(_0418_),
    .Y(_0419_)
  );
  OAI21X1 _0965_ (
    .A(_0413_),
    .B(_0419_),
    .C(_0223_),
    .Y(_0420_)
  );
  NAND2X1 _0966_ (
    .A(_0083_),
    .B(_0087_),
    .Y(_0421_)
  );
  OAI21X1 _0967_ (
    .A(_0175_),
    .B(_0176_),
    .C(_0421_),
    .Y(_0422_)
  );
  XOR2X1 _0968_ (
    .A(_0084_),
    .B(_0088_),
    .Y(_0423_)
  );
  OR2X2 _0969_ (
    .A(_0422_),
    .B(_0423_),
    .Y(_0424_)
  );
  AOI21X1 _0970_ (
    .A(_0422_),
    .B(_0423_),
    .C(_0218_),
    .Y(_0425_)
  );
  AOI22X1 _0971_ (
    .A(_0201_),
    .B(_0219_),
    .C(_0424_),
    .D(_0425_),
    .Y(_0426_)
  );
  AOI21X1 _0972_ (
    .A(_0420_),
    .B(_0426_),
    .C(_0118_),
    .Y(_0024_)
  );
  NAND2X1 _0973_ (
    .A(_0137_),
    .B(_0219_),
    .Y(_0427_)
  );
  AOI21X1 _0974_ (
    .A(_0415_),
    .B(_0416_),
    .C(_0134_),
    .Y(_0428_)
  );
  NAND2X1 _0975_ (
    .A(_0134_),
    .B(_0411_),
    .Y(_0429_)
  );
  NAND2X1 _0976_ (
    .A(_0137_),
    .B(_0429_),
    .Y(_0430_)
  );
  AOI21X1 _0977_ (
    .A(_0203_),
    .B(_0428_),
    .C(_0430_),
    .Y(_0431_)
  );
  OAI21X1 _0978_ (
    .A(_0137_),
    .B(_0429_),
    .C(_0223_),
    .Y(_0432_)
  );
  NAND2X1 _0979_ (
    .A(_0422_),
    .B(_0423_),
    .Y(_0433_)
  );
  OAI21X1 _0980_ (
    .A(_0398_),
    .B(_0392_),
    .C(_0433_),
    .Y(_0434_)
  );
  XOR2X1 _0981_ (
    .A(_0085_),
    .B(_0089_),
    .Y(_0435_)
  );
  XNOR2X1 _0982_ (
    .A(_0434_),
    .B(_0435_),
    .Y(_0436_)
  );
  OAI21X1 _0983_ (
    .A(_0218_),
    .B(_0436_),
    .C(_0207_),
    .Y(_0437_)
  );
  OAI21X1 _0984_ (
    .A(_0431_),
    .B(_0432_),
    .C(_0437_),
    .Y(_0438_)
  );
  AOI21X1 _0985_ (
    .A(_0427_),
    .B(_0438_),
    .C(_0118_),
    .Y(_0025_)
  );
  OAI21X1 _0986_ (
    .A(_0473_),
    .B(_0218_),
    .C(_0341_),
    .Y(_0439_)
  );
  AOI21X1 _0987_ (
    .A(_0391_),
    .B(_0232_),
    .C(_0439_),
    .Y(_0019_)
  );
  OAI21X1 _0988_ (
    .A(_0457_),
    .B(_0218_),
    .C(_0341_),
    .Y(_0440_)
  );
  AOI21X1 _0989_ (
    .A(_0392_),
    .B(_0232_),
    .C(_0440_),
    .Y(_0020_)
  );
  OAI21X1 _0990_ (
    .A(_0458_),
    .B(_0218_),
    .C(_0150_),
    .Y(_0441_)
  );
  AOI21X1 _0991_ (
    .A(_0393_),
    .B(_0232_),
    .C(_0441_),
    .Y(_0021_)
  );
  INVX1 _0992_ (
    .A(_0083_),
    .Y(_0442_)
  );
  OAI21X1 _0993_ (
    .A(_0464_),
    .B(_0218_),
    .C(_0150_),
    .Y(_0443_)
  );
  AOI21X1 _0994_ (
    .A(_0442_),
    .B(_0232_),
    .C(_0443_),
    .Y(_0015_)
  );
  OAI21X1 _0995_ (
    .A(_0465_),
    .B(_0218_),
    .C(_0150_),
    .Y(_0444_)
  );
  AOI21X1 _0996_ (
    .A(_0398_),
    .B(_0232_),
    .C(_0444_),
    .Y(_0016_)
  );
  INVX1 _0997_ (
    .A(_0085_),
    .Y(_0445_)
  );
  OAI21X1 _0998_ (
    .A(_0466_),
    .B(_0218_),
    .C(_0150_),
    .Y(_0446_)
  );
  AOI21X1 _0999_ (
    .A(_0445_),
    .B(_0232_),
    .C(_0446_),
    .Y(_0017_)
  );
  AOI21X1 _1000_ (
    .A(_0119_),
    .B(_0250_),
    .C(_0344_),
    .Y(_0079_)
  );
  AOI22X1 _1001_ (
    .A(_0115_),
    .B(_0156_),
    .C(_0158_),
    .D(_0470_),
    .Y(_0447_)
  );
  INVX1 _1002_ (
    .A(_0447_),
    .Y(_0047_)
  );
  AOI22X1 _1003_ (
    .A(_0116_),
    .B(_0156_),
    .C(_0158_),
    .D(_0471_),
    .Y(_0448_)
  );
  INVX1 _1004_ (
    .A(_0448_),
    .Y(_0048_)
  );
  AOI22X1 _1005_ (
    .A(_0112_),
    .B(_0156_),
    .C(_0158_),
    .D(_0461_),
    .Y(_0449_)
  );
  INVX1 _1006_ (
    .A(_0449_),
    .Y(_0044_)
  );
  AOI22X1 _1007_ (
    .A(_0113_),
    .B(_0156_),
    .C(_0158_),
    .D(_0462_),
    .Y(_0450_)
  );
  INVX1 _1008_ (
    .A(_0450_),
    .Y(_0045_)
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1009_ (
    .CLK(CLK),
    .D(_0000_[0]),
    .Q(exp_op1[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1010_ (
    .CLK(CLK),
    .D(_0000_[1]),
    .Q(exp_op1[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1011_ (
    .CLK(CLK),
    .D(_0000_[2]),
    .Q(exp_op1[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1012_ (
    .CLK(CLK),
    .D(_0000_[3]),
    .Q(exp_op1[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1013_ (
    .CLK(CLK),
    .D(_0001_[0]),
    .Q(exp_op2[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1014_ (
    .CLK(CLK),
    .D(_0001_[1]),
    .Q(exp_op2[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1015_ (
    .CLK(CLK),
    .D(_0001_[2]),
    .Q(exp_op2[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1016_ (
    .CLK(CLK),
    .D(_0001_[3]),
    .Q(exp_op2[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1017_ (
    .CLK(CLK),
    .D(_0002_[0]),
    .Q(final_exp[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1018_ (
    .CLK(CLK),
    .D(_0002_[1]),
    .Q(final_exp[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1019_ (
    .CLK(CLK),
    .D(_0002_[2]),
    .Q(final_exp[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1020_ (
    .CLK(CLK),
    .D(_0002_[3]),
    .Q(final_exp[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1021_ (
    .CLK(CLK),
    .D(_0003_[0]),
    .Q(final_man[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1022_ (
    .CLK(CLK),
    .D(_0003_[1]),
    .Q(final_man[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1023_ (
    .CLK(CLK),
    .D(_0003_[2]),
    .Q(final_man[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1024_ (
    .CLK(CLK),
    .D(_0003_[3]),
    .Q(final_man[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1025_ (
    .CLK(CLK),
    .D(_0003_[4]),
    .Q(final_man[4])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1026_ (
    .CLK(CLK),
    .D(_0003_[5]),
    .Q(final_man[5])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1027_ (
    .CLK(CLK),
    .D(_0003_[6]),
    .Q(final_man[6])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1028_ (
    .CLK(CLK),
    .D(_0003_[7]),
    .Q(final_man[7])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1029_ (
    .CLK(CLK),
    .D(_0004_[0]),
    .Q(final_output[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1030_ (
    .CLK(CLK),
    .D(_0004_[1]),
    .Q(final_output[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1031_ (
    .CLK(CLK),
    .D(_0004_[2]),
    .Q(final_output[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1032_ (
    .CLK(CLK),
    .D(_0004_[3]),
    .Q(final_output[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1033_ (
    .CLK(CLK),
    .D(_0004_[4]),
    .Q(final_output[4])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1034_ (
    .CLK(CLK),
    .D(_0004_[5]),
    .Q(final_output[5])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1035_ (
    .CLK(CLK),
    .D(_0004_[6]),
    .Q(final_output[6])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1036_ (
    .CLK(CLK),
    .D(_0004_[7]),
    .Q(final_output[7])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1037_ (
    .CLK(CLK),
    .D(_0005_),
    .Q(final_sign)
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1038_ (
    .CLK(CLK),
    .D(_0006_[0]),
    .Q(man_op1[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1039_ (
    .CLK(CLK),
    .D(_0006_[1]),
    .Q(man_op1[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1040_ (
    .CLK(CLK),
    .D(_0006_[2]),
    .Q(man_op1[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1041_ (
    .CLK(CLK),
    .D(_0007_[0]),
    .Q(man_op2[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1042_ (
    .CLK(CLK),
    .D(_0007_[1]),
    .Q(man_op2[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1043_ (
    .CLK(CLK),
    .D(_0007_[2]),
    .Q(man_op2[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1044_ (
    .CLK(CLK),
    .D(_0008_[0]),
    .Q(normalized_man[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1045_ (
    .CLK(CLK),
    .D(_0008_[1]),
    .Q(normalized_man[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1046_ (
    .CLK(CLK),
    .D(_0008_[2]),
    .Q(normalized_man[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1047_ (
    .CLK(CLK),
    .D(_0008_[3]),
    .Q(normalized_man[3])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1048_ (
    .CLK(CLK),
    .D(_0008_[4]),
    .Q(normalized_man[4])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1049_ (
    .CLK(CLK),
    .D(_0008_[5]),
    .Q(normalized_man[5])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1050_ (
    .CLK(CLK),
    .D(_0009_[4]),
    .Q(rg_operands[4])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1051_ (
    .CLK(CLK),
    .D(_0009_[5]),
    .Q(rg_operands[5])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1052_ (
    .CLK(CLK),
    .D(_0009_[6]),
    .Q(rg_operands[6])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1053_ (
    .CLK(CLK),
    .D(_0009_[7]),
    .Q(rg_operands[7])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1054_ (
    .CLK(CLK),
    .D(_0009_[8]),
    .Q(rg_operands[8])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1055_ (
    .CLK(CLK),
    .D(_0009_[9]),
    .Q(rg_operands[9])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1056_ (
    .CLK(CLK),
    .D(_0009_[10]),
    .Q(rg_operands[10])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1057_ (
    .CLK(CLK),
    .D(_0009_[11]),
    .Q(rg_operands[11])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1058_ (
    .CLK(CLK),
    .D(_0009_[12]),
    .Q(rg_operands[12])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1059_ (
    .CLK(CLK),
    .D(_0009_[13]),
    .Q(rg_operands[13])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1060_ (
    .CLK(CLK),
    .D(_0009_[14]),
    .Q(rg_operands[14])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1061_ (
    .CLK(CLK),
    .D(_0009_[15]),
    .Q(rg_operands[15])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1062_ (
    .CLK(CLK),
    .D(_0009_[16]),
    .Q(rg_operands[16])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1063_ (
    .CLK(CLK),
    .D(_0009_[17]),
    .Q(rg_operands[17])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1064_ (
    .CLK(CLK),
    .D(_0009_[18]),
    .Q(rg_operands[18])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1065_ (
    .CLK(CLK),
    .D(_0009_[19]),
    .Q(rg_operands[19])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1066_ (
    .CLK(CLK),
    .D(_0009_[20]),
    .Q(rg_operands[20])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1067_ (
    .CLK(CLK),
    .D(_0010_[0]),
    .Q(rounded_man[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1068_ (
    .CLK(CLK),
    .D(_0010_[1]),
    .Q(rounded_man[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1069_ (
    .CLK(CLK),
    .D(_0010_[2]),
    .Q(rounded_man[2])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1070_ (
    .CLK(CLK),
    .D(_0011_),
    .Q(sign_op1)
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1071_ (
    .CLK(CLK),
    .D(_0012_),
    .Q(sign_op2)
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1072_ (
    .CLK(CLK),
    .D(_0013_[0]),
    .Q(stage[0])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1073_ (
    .CLK(CLK),
    .D(_0013_[1]),
    .Q(stage[1])
  );
  (* src = "cfloat8_mul.v:380" *)
  DFFPOSX1 _1074_ (
    .CLK(CLK),
    .D(_0013_[2]),
    .Q(stage[2])
  );
  assign { _0499_[7], _0499_[0] } = { 1'h0, NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[0] };
  assign { _0500_[7], _0500_[1:0] } = { 1'h0, NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[1:0] };
  assign { _0501_[7:6], _0501_[1:0] } = 4'h0;
  assign { _0502_[7], _0502_[0] } = 2'h0;
  assign { _0503_[7:4], _0503_[1:0] } = { 1'h0, _0499_[6:4], 2'h0 };
  assign { _0504_[7:5], _0504_[2:0] } = { 1'h0, _0500_[6:5], _0499_[2:1], NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[0] };
  assign _0505_[1:0] = 2'h0;
  assign { _0506_[7], _0506_[2:0] } = { _0502_[6], NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[2:0] };
  assign { _0507_[7:4], _0507_[1:0] } = { 4'h0, _0499_[1], NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[0] };
  assign { _0508_[7:5], _0508_[0] } = 4'h0;
  assign { _0509_[7:6], _0509_[2:0] } = { 2'h0, _0503_[2], 2'h0 };
  assign { _0510_[7:6], _0510_[2:0] } = { 1'h0, _0499_[6], 3'h0 };
  assign { _0529_[2], _0529_[0] } = { stage[2], stage[0] };
  assign _0530_[1:0] = stage[1:0];
  assign _0531_[1] = final_man[7];
  assign _0532_[0] = final_man[6];
  assign { _0559_[11], _0559_[5] } = { _0522_, 1'h0 };
  assign _0572_[0] = \MUX_final_exp$write_1__VAL_2 [0];
  assign _0573_[0] = stage[0];
  assign _0575_[0] = _0574_[0];
  assign _0576_[0] = normalized_man[3];
  assign _0577_[0] = final_exp[0];
  assign { _0581_[3], _0581_[0] } = { _0578_[3], _0580_[0] };
  assign _0588_[3] = 1'h1;
  assign _0591_[0] = _0590_[0];
  assign _0592_[0] = _0571_[0];
  assign _0595_[3] = 1'h0;
  assign _0600_[3] = final_exp[3];
  assign { _0604_[2], _0604_[0] } = { 1'h1, final_man[0] };
  assign _0605_[2] = 1'h1;
  assign CAN_FIRE_RL_stage1 = WILL_FIRE_RL_stage1;
  assign CAN_FIRE_RL_stage2 = WILL_FIRE_RL_stage2;
  assign CAN_FIRE_RL_stage3 = WILL_FIRE_RL_stage3;
  assign CAN_FIRE_RL_stage4 = WILL_FIRE_RL_stage4;
  assign CAN_FIRE_RL_stage5 = WILL_FIRE_RL_stage5;
  assign CAN_FIRE_RL_trial = 1'h1;
  assign CAN_FIRE_send = 1'h1;
  assign RDY_receive = 1'h1;
  assign RDY_send = 1'h1;
  assign WILL_FIRE_RL_trial = 1'h1;
  assign WILL_FIRE_send = EN_send;
  assign count_temp__h2134 = { 1'h0, IF_final_man_5_BIT_5_7_THEN_0_ELSE_IF_final_ma_ETC___d59 };
  assign \exp_op1$D_IN  = rg_operands[19:16];
  assign \exp_op1$EN  = WILL_FIRE_RL_stage2;
  assign \exp_op2$D_IN  = rg_operands[11:8];
  assign \exp_op2$EN  = WILL_FIRE_RL_stage2;
  assign \final_bias$EN  = WILL_FIRE_RL_stage2;
  assign \final_man$D_IN  = { 4'h0, NOT_exp_op1_5_EQ_0_4_5_CONCAT_man_op1_6_7_MUL__ETC___d32[3:0] };
  assign \final_man$EN  = WILL_FIRE_RL_stage3;
  assign \final_output$D_IN  = { final_sign, final_exp, rounded_man };
  assign \final_output$EN  = WILL_FIRE_RL_stage5;
  assign \final_sign$EN  = WILL_FIRE_RL_stage1;
  assign inter_mantissa1__h1465 = { hidden_bit_op1__h1397, man_op1 };
  assign inter_mantissa2__h1466 = { hidden_bit_op2__h1398, man_op2 };
  assign \man_op1$D_IN  = rg_operands[15:13];
  assign \man_op1$EN  = WILL_FIRE_RL_stage3;
  assign \man_op2$D_IN  = rg_operands[7:5];
  assign \man_op2$EN  = WILL_FIRE_RL_stage3;
  assign normalized_count = 4'h0;
  assign \normalized_count$D_IN  = 4'h0;
  assign \normalized_count$EN  = 1'h0;
  assign \normalized_man$EN  = WILL_FIRE_RL_stage4;
  assign output_man = 3'h0;
  assign \output_man$D_IN  = 3'h0;
  assign \output_man$EN  = 1'h0;
  assign receive = final_output;
  assign \rg_operands$D_IN  = send_data_input;
  assign \rg_operands$EN  = EN_send;
  assign \sign_op1$D_IN  = rg_operands[20];
  assign \sign_op1$EN  = WILL_FIRE_RL_stage1;
  assign \sign_op2$D_IN  = rg_operands[12];
  assign \sign_op2$EN  = WILL_FIRE_RL_stage1;
  assign x__h1975 = { 1'h0, final_man[5:1] };
  assign _0474_ = rounded_man[0];
  assign _0496_ = stage[0];
  assign _0081_ = RST_N;
  assign _0011_ = _0075_;
  assign _0498_ = stage[2];
  assign _0459_ = rg_operands[12];
  assign _0495_ = sign_op2;
  assign _0460_ = rg_operands[13];
  assign _0480_ = send_data_input[13];
  assign _0080_ = EN_send;
  assign _0461_ = rg_operands[14];
  assign _0481_ = send_data_input[14];
  assign _0462_ = rg_operands[15];
  assign _0482_ = send_data_input[15];
  assign _0463_ = rg_operands[16];
  assign _0483_ = send_data_input[16];
  assign _0464_ = rg_operands[17];
  assign _0484_ = send_data_input[17];
  assign _0012_ = _0076_;
  assign _0093_ = final_exp[3];
  assign _0010_[0] = _0072_;
  assign _0110_ = final_sign;
  assign _0091_ = final_exp[1];
  assign _0090_ = final_exp[0];
  assign _0451_ = normalized_man[0];
  assign _0008_[0] = _0049_;
  assign _0007_[0] = _0046_;
  assign _0006_[0] = _0043_;
  assign _0005_ = _0042_;
  assign _0004_[1] = _0035_;
  assign _0004_[0] = _0034_;
  assign _0003_[0] = _0026_;
  assign _0002_[1] = _0023_;
  assign _0002_[0] = _0022_;
  assign _0094_ = final_man[0];
  assign _0472_ = rg_operands[8];
  assign _0086_ = exp_op2[0];
  assign _0001_[0] = _0018_;
  assign _0082_ = exp_op1[0];
  assign _0000_[0] = _0014_;
  assign _0010_[1] = _0073_;
  assign _0111_ = man_op1[0];
  assign _0468_ = rg_operands[4];
  assign _0488_ = send_data_input[4];
  assign _0100_ = final_man[6];
  assign _0101_ = final_man[7];
  assign _0096_ = final_man[2];
  assign _0097_ = final_man[3];
  assign _0497_ = stage[1];
  assign _0455_ = normalized_man[4];
  assign _0453_ = normalized_man[2];
  assign _0494_ = sign_op1;
  assign _0454_ = normalized_man[3];
  assign _0013_[0] = _0077_;
  assign _0095_ = final_man[1];
  assign _0092_ = final_exp[2];
  assign _0452_ = normalized_man[1];
  assign _0098_ = final_man[4];
  assign _0099_ = final_man[5];
  assign _0084_ = exp_op1[2];
  assign _0085_ = exp_op1[3];
  assign _0083_ = exp_op1[1];
  assign _0087_ = exp_op2[1];
  assign _0467_ = rg_operands[20];
  assign _0469_ = rg_operands[5];
  assign _0114_ = man_op2[0];
  assign _0102_ = final_output[0];
  assign _0088_ = exp_op2[2];
  assign _0089_ = exp_op2[3];
  assign _0008_[2] = _0051_;
  assign _0008_[3] = _0052_;
  assign _0008_[4] = _0053_;
  assign _0008_[5] = _0054_;
  assign _0112_ = man_op1[1];
  assign _0113_ = man_op1[2];
  assign _0456_ = normalized_man[5];
  assign _0475_ = rounded_man[1];
  assign _0009_[14] = _0059_;
  assign _0009_[15] = _0060_;
  assign _0009_[16] = _0061_;
  assign _0009_[17] = _0062_;
  assign _0009_[18] = _0063_;
  assign _0009_[19] = _0064_;
  assign _0009_[20] = _0065_;
  assign _0008_[1] = _0050_;
  assign _0465_ = rg_operands[18];
  assign _0485_ = send_data_input[18];
  assign _0466_ = rg_operands[19];
  assign _0486_ = send_data_input[19];
  assign _0487_ = send_data_input[20];
  assign _0009_[4] = _0066_;
  assign _0013_[1] = _0078_;
  assign _0471_ = rg_operands[7];
  assign _0491_ = send_data_input[7];
  assign _0476_ = rounded_man[2];
  assign _0010_[2] = _0074_;
  assign _0492_ = send_data_input[8];
  assign _0473_ = rg_operands[9];
  assign _0493_ = send_data_input[9];
  assign _0457_ = rg_operands[10];
  assign _0477_ = send_data_input[10];
  assign _0458_ = rg_operands[11];
  assign _0478_ = send_data_input[11];
  assign _0479_ = send_data_input[12];
  assign _0489_ = send_data_input[5];
  assign _0470_ = rg_operands[6];
  assign _0490_ = send_data_input[6];
  assign _0009_[5] = _0067_;
  assign _0009_[6] = _0068_;
  assign _0009_[7] = _0069_;
  assign _0009_[8] = _0070_;
  assign _0009_[9] = _0071_;
  assign _0009_[10] = _0055_;
  assign _0009_[11] = _0056_;
  assign _0009_[12] = _0057_;
  assign _0009_[13] = _0058_;
  assign _0109_ = final_output[7];
  assign _0004_[2] = _0036_;
  assign _0004_[3] = _0037_;
  assign _0004_[4] = _0038_;
  assign _0004_[5] = _0039_;
  assign _0004_[6] = _0040_;
  assign _0004_[7] = _0041_;
  assign _0003_[1] = _0027_;
  assign _0003_[2] = _0028_;
  assign _0003_[3] = _0029_;
  assign _0003_[4] = _0030_;
  assign _0003_[5] = _0031_;
  assign _0003_[6] = _0032_;
  assign _0003_[7] = _0033_;
  assign _0002_[2] = _0024_;
  assign _0002_[3] = _0025_;
  assign _0001_[1] = _0019_;
  assign _0001_[2] = _0020_;
  assign _0001_[3] = _0021_;
  assign _0000_[1] = _0015_;
  assign _0000_[2] = _0016_;
  assign _0000_[3] = _0017_;
  assign _0013_[2] = _0079_;
  assign _0115_ = man_op2[1];
  assign _0116_ = man_op2[2];
  assign _0007_[1] = _0047_;
  assign _0007_[2] = _0048_;
  assign _0006_[1] = _0044_;
  assign _0006_[2] = _0045_;
  assign _0103_ = final_output[1];
  assign _0104_ = final_output[2];
  assign _0105_ = final_output[3];
  assign _0106_ = final_output[4];
  assign _0107_ = final_output[5];
  assign _0108_ = final_output[6];
endmodule
