//
// Generated by Bluespec Compiler, version 2022.01-10-g3a4741b2 (build 3a4741b2)
//
// On Sun Dec 10 11:12:04 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTestbench(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // ports of submodule testmodule
  wire [20 : 0] testmodule$send_data_input;
  wire testmodule$EN_send;

  // rule scheduling signals
  wire CAN_FIRE_RL_giveInp,
       CAN_FIRE_RL_greet,
       WILL_FIRE_RL_giveInp,
       WILL_FIRE_RL_greet;

  // submodule testmodule
  cfloat8_mul testmodule(.CLK(CLK),
			 .RST_N(RST_N),
			 .send_data_input(testmodule$send_data_input),
			 .EN_send(testmodule$EN_send),
			 .RDY_send(),
			 .receive(),
			 .RDY_receive());

  // rule RL_giveInp
  assign CAN_FIRE_RL_giveInp = (count ^ 32'h80000000) < 32'h80000002 ;
  assign WILL_FIRE_RL_giveInp = CAN_FIRE_RL_giveInp ;

  // rule RL_greet
  assign CAN_FIRE_RL_greet = 1'd1 ;
  assign WILL_FIRE_RL_greet = 1'd1 ;

  // register count
  assign count$D_IN = count + 32'd1 ;
  assign count$EN = 1'd1 ;

  // submodule testmodule
  assign testmodule$send_data_input = 21'd78164 ;
  assign testmodule$EN_send = CAN_FIRE_RL_giveInp ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if ((count ^ 32'h80000000) > 32'h80000014) $finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE) $display("hi dina");
  end
  // synopsys translate_on
endmodule  // mkTestbench

