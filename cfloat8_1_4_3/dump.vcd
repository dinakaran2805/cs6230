$version Generated by VerilatedVcd $end
$date Wed Dec  6 22:27:48 2023
 $end
$timescale   1ps $end

 $scope module main $end
  $var wire  1 I CLK $end
  $var wire  1 J RST_N $end
  $scope module top $end
   $var wire  1 > CAN_FIRE_RL_giveInp $end
   $var wire  1 K CAN_FIRE_RL_greet $end
   $var wire  1 F CAN_FIRE_RL_testmodule_display_output $end
   $var wire  1 4 CAN_FIRE_RL_testmodule_stage1 $end
   $var wire  1 ' CAN_FIRE_RL_testmodule_stage2 $end
   $var wire  1 . CAN_FIRE_RL_testmodule_stage3 $end
   $var wire  1 1 CAN_FIRE_RL_testmodule_stage4 $end
   $var wire  1 K CAN_FIRE_RL_testmodule_trial $end
   $var wire  1 I CLK $end
   $var wire  3 G MUX_testmodule_stage$write_1__VAL_2 [2:0] $end
   $var wire  1 J RST_N $end
   $var wire  1 > WILL_FIRE_RL_giveInp $end
   $var wire  1 K WILL_FIRE_RL_greet $end
   $var wire  1 F WILL_FIRE_RL_testmodule_display_output $end
   $var wire  1 4 WILL_FIRE_RL_testmodule_stage1 $end
   $var wire  1 ' WILL_FIRE_RL_testmodule_stage2 $end
   $var wire  1 . WILL_FIRE_RL_testmodule_stage3 $end
   $var wire  1 1 WILL_FIRE_RL_testmodule_stage4 $end
   $var wire  1 K WILL_FIRE_RL_testmodule_trial $end
   $var wire 32 # count [31:0] $end
   $var wire 32 $ count$D_IN [31:0] $end
   $var wire  1 K count$EN $end
   $var wire  4 % testmodule_exp_op1 [3:0] $end
   $var wire  4 & testmodule_exp_op1$D_IN [3:0] $end
   $var wire  1 ' testmodule_exp_op1$EN $end
   $var wire  4 ( testmodule_exp_op2 [3:0] $end
   $var wire  4 ) testmodule_exp_op2$D_IN [3:0] $end
   $var wire  1 ' testmodule_exp_op2$EN $end
   $var wire  4 * testmodule_final_exp [3:0] $end
   $var wire  4 + testmodule_final_exp$D_IN [3:0] $end
   $var wire  1 ' testmodule_final_exp$EN $end
   $var wire  6 , testmodule_final_man [5:0] $end
   $var wire  6 - testmodule_final_man$D_IN [5:0] $end
   $var wire  1 . testmodule_final_man$EN $end
   $var wire  8 / testmodule_final_output [7:0] $end
   $var wire  8 0 testmodule_final_output$D_IN [7:0] $end
   $var wire  1 1 testmodule_final_output$EN $end
   $var wire  1 2 testmodule_final_sign $end
   $var wire  1 3 testmodule_final_sign$D_IN $end
   $var wire  1 4 testmodule_final_sign$EN $end
   $var wire  3 5 testmodule_man_op1 [2:0] $end
   $var wire  3 6 testmodule_man_op1$D_IN [2:0] $end
   $var wire  1 . testmodule_man_op1$EN $end
   $var wire  3 7 testmodule_man_op2 [2:0] $end
   $var wire  3 8 testmodule_man_op2$D_IN [2:0] $end
   $var wire  1 . testmodule_man_op2$EN $end
   $var wire  3 9 testmodule_output_man [2:0] $end
   $var wire  3 : testmodule_output_man$D_IN [2:0] $end
   $var wire  1 . testmodule_output_man$EN $end
   $var wire 80 ; testmodule_rg_operands [79:0] $end
   $var wire 80 L testmodule_rg_operands$D_IN [79:0] $end
   $var wire  1 > testmodule_rg_operands$EN $end
   $var wire  1 ? testmodule_sign_op1 $end
   $var wire  1 @ testmodule_sign_op1$D_IN $end
   $var wire  1 4 testmodule_sign_op1$EN $end
   $var wire  1 A testmodule_sign_op2 $end
   $var wire  1 B testmodule_sign_op2$D_IN $end
   $var wire  1 4 testmodule_sign_op2$EN $end
   $var wire  3 C testmodule_stage [2:0] $end
   $var wire  3 D testmodule_stage$D_IN [2:0] $end
   $var wire  1 E testmodule_stage$EN $end
   $var wire  3 H x__h1457 [2:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000001 $
b0000 %
b0000 &
0'
b0000 (
b0000 )
b0000 *
b0000 +
b000000 ,
b000000 -
0.
b00000000 /
b00000000 0
01
02
03
04
b000 5
b000 6
b000 7
b000 8
b000 9
b000 :
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
1>
0?
0@
0A
0B
b000 C
b001 D
1E
0F
b001 G
b001 H
0I
0J
1K
b00010011110001000000000000000000000000000000000100000000000000000000000000000100 L
#1
b10101010101010101010101010101010 #
b10101010101010101010101010101011 $
b1010 %
b0101 &
1'
b1010 (
b0101 )
b1010 *
b0100 +
b101010 ,
b000100 -
b10101010 /
b01010010 0
b010 5
b010 6
b010 7
b010 8
b010 9
b101 :
b10101010101010101010101010101010101010101010101010101010101010101010101010101010 ;
1@
1B
b010 C
b011 G
b110 H
1I
#2
b00000000000000000000000000000000 #
b00000000000000000000000000000001 $
b0000 %
b0000 &
0'
b0000 (
b0000 )
b0000 *
b0000 +
b000000 ,
b000000 -
b00000000 /
b00000000 0
b000 5
b000 6
b000 7
b000 8
b000 9
b000 :
b00000000000000000000000000000000000000000000000000000000000000000000000000000000 ;
0@
0B
b000 C
b001 G
b001 H
1J
#5
0I
#10
1I
#15
b00000000000000000000000000000001 #
b00000000000000000000000000000010 $
b0010 &
b1000 )
14
b011 6
b100 8
b00010011110001000000000000000000000000000000000100000000000000000000000000000100 ;
1B
b001 C
b010 G
0I
#20
1I
#25
b00000000000000000000000000000010 #
b00000000000000000000000000000011 $
13
0>
1A
b010 D
0I
#30
1I
#35
b00000000000000000000000000000011 #
b00000000000000000000000000000100 $
1'
b10000000 0
12
04
b010 C
b011 D
b011 G
0I
#40
1I
#45
b00000000000000000000000000000100 #
b00000000000000000000000000000101 $
b0010 %
0'
b1000 (
b1010 +
1.
b011 C
b100 D
b100 G
0I
#50
1I
#55
b00000000000000000000000000000101 #
b00000000000000000000000000000110 $
b001100 -
0.
11
b011 5
b100 7
b100 C
b101 D
b101 G
0I
#60
1I
#65
b00000000000000000000000000000110 #
b00000000000000000000000000000111 $
b10000000 /
01
b101 C
b010 D
0E
1F
b110 G
0I
#70
1I
#75
b00000000000000000000000000000111 #
b00000000000000000000000000001000 $
0I
